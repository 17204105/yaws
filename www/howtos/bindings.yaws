<erl>
  out(A) -> [{yssi, "../includes/config.yaws"}].
</erl>

<div class="text-right">
  <a href="#howto_overview">&#10143; Overview</a>
</div>
<br/>
<p class="text-justify">
  Bindings are the opposite of
  <a href="#howto_ssi">Server Side Includes</a>.
  SSI is used when entire pages are written largely in EHTML and snippets of
  HTML, or more typically javascript code is inserted into the EHTML code.
</p>
<p class="text-justify">
  Bindings are used the other way around. Essentially entire pages are written
  in regular HTML but parts of the HTML needs to be dynamically generated.
  The Yaws callback <code>out/1</code> can return:
</p>
<verbatim class="code erlang">
{bindings, [{Key1, Value2}, {Key2, Value2} .....]}.
</verbatim>
<br/>
<p class="text-justify">
  All bindings can then be used in the rest of Yaws code (in HTML source and
  within erl tags). In HTML source <code>%%Key%%</code> is expanded to
  <code>Value</code> and within erl tags <code>yaws_api:get_binding(Key)</code>
  can be used to extract <code>Value</code>. With the binding feature it is
  easier to write transparent Yaws code making it easier to to work together
  with Web people knowing little or nothing about Erlang.
</p>
<p class="text-justify">
  An example:
</p>
<verbatim class="code html">
  <erl>
    out(A) ->
        {bindings, [{"A", "foo"}, {"B", "baz"}]}.
  </erl>

  <html>
    <body>
      <p>%%A%%</p>
      <p><font size="4">%%A%% != %%B%%</font></p>
      <p>An enormous amount of plain html source here.</p>

      <erl>
        out(A) ->
            Value = yaws_api:binding("A"),
            {ehtml, {ul, [],
                     [{li, [], Value},
                      {li, [], "gazonk"}]}}.
      </erl>

      %%A%% = %%A%% (hit me)
    </body>
  </html>
</verbatim>
<br/>
<p class="text-justify">
  Which expands to:
</p>
<verbatim class="code html">
  <html>
    <body>
      <p>foo</p>
      <p><font size=\"4\">foo != baz</font></p>
      <p>An enormous amount of plain html source here.</p>

      <ul>
        <li>foo</li>
        <li>gazonk</li>
      </ul>

      foo = foo (hit me)
    </body>
  </html>
</verbatim>
<br/>
